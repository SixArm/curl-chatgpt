#!/bin/sh
set -euf

# Include https://github.com/SixArm/posix-shell-script-kit
. "$(dirname "$(readlink -f "$0")")/posix-shell-script-kit"

## Program Tracking

program_command="curl-chatgpt"
program_version="1.2.0"
program_created="2023-03-11T20:50:17Z"
program_updated="2024-10-22T08:42:08Z"
program_license="GPL-2.0 or GPL-3.0 or contact us for more"
program_website="https://github.com/sixarm/curl-chatgpt"
program_contact="Joel Parker Henderson (joel@sixarm.com)"

## Help Function

help(){
cat << EOF
curl-chatgpt

This is a unix shell script to connect to the OpenAI ChatGPT API,
use your own OpenAI API KEY to make request with prompt content, 
receive a result choice, and print its message content as text.

This script is deliberately simple to use as is, and also is
built so you can edit the source code if you want to change it.

The dependencies are POSIX shell, curl command, and jq command.

Syntax:

    curl-chatgpt <prompt-content>

    curl-chatgpt --output <output-file> <prompt-content>

    curl-chatgpt --input <input-file>

    curl-chatgpt --input <input-file> --output <output-file>

Examples:

    curl-chatgpt "What is the meaning of life?"

    curl-chatgpt --output result.txt "What is the meaning of life?"

    curl-chatgpt --input prompt.txt

    curl-chatgpt --input prompt.txt --output result.txt

## Setup

To use this program, you need to first do this:

  1. Get your own OpenAI ChatGPT API key from
     https://platform.openai.com/account/api-keys

  2. Export the key into your local environment:
     export OPENAI_API_KEY=<KEY>

  3. Be sure your system has the curl command and jq command.

## Options

  * -h --help: 
      print helpful information

  * -v --verbose: 
      print diagnostic information; use 2x or 3x for more

  * -V --version: 
      print the program version number

  * -i --input <file>:
      input the request content text from an exiting file

  * -o --output <file>:
      output the response content text into a new file

  * -c --content <text>:
      explicitly provide a request content prompt string

  * --program-command:
      print the program command name

  * --program-version:
      print the program version number

  * --program-created:
      print the program created date

  * --program-updated:
      print the program updated date

  * --program-license:
      print the program license name

  * --program-website:
      print the program website URL

  * --program-contact:
      print the program contact information for the maintainer

## Repetition

The options for --input, --output, and --content may be repeated.

Examples:

    curl-chatgpt "prompt 1" "prompt 2" "prompt 3"

    curl-chatgpt -o out1.txt -c "prompt 1" -o out2.txt -c "prompt 2"

    curl-chatgpt -i in1.txt -o out1.txt -i in2.txt -o out2.txt

## Tracking

  * Command: $program_command
  * Version: $program_version
  * Created: $program_updated
  * Updated: $program_updated
  * License: $program_license
  * Website: $program_website
  * Contact: $program_contact
  
EOF
}

##
# Core
##

curl_cmd() {
    case $verbose in
        0|1)
            printf %s "curl --silent"
            ;;
        2)
            printf %s "curl"
            ;;
        *)
            printf %s "curl --verbose"
            ;;
    esac
}

curl_chatgpt() {
    content="$1"
    curl=$(curl_cmd)
    if [ "$verbose" -ge 2 ]; then set -x; fi
    $curl "https://api.openai.com/v1/chat/completions" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "Content-Type: application/json" \
    -d "{
    \"model\": \"gpt-3.5-turbo\",
    \"messages\": [{\"role\": \"user\", \"content\": \"$content\"}] 
    }" 
    { set +x; } 2>/dev/null
}

parse_response_file() {
    response_file="$1"
    x="$(jq -r '.choices[0].message.content' "$response_file")"
    case "$x" in
        null)
            cat "$response_file"
            exit "$EXIT_FAILURE"
            ;;
        *)
            out "$x"
            ;;
    esac
}

request_content() {
    content="$1"
    if [ $verbose -gt 0 ]; then
        msg="curl_chatgpt"
        if [ -n "${input+1}" ]; then
            msg="$msg --input \"$input\""
        fi
        if [ -n "${output+1}" ]; then
            msg="$msg --output \"$output\""
        fi
        out "$msg \"$content\""
    fi
    response_file="$(mktemp_file)"
    if [ "$verbose" -ge 1 ]; then out "response_file: $response_file"; fi
    curl_chatgpt "$content" > "$response_file"
    if [ -n "${output+1}" ]; then
        parse_response_file "$response_file" > "$output"
    else 
        parse_response_file "$response_file"
    fi
    unset input
    unset output
    unset content
    unset response_file
}

command_exists_or_die curl
command_exists_or_die jq
verbose=0

# Process command line options
while [ $# -gt 0 ]; do
    case $1 in
        # Two hyphens ends the options parsing
        --)
            shift
            break
            ;;
        -h|--help)
            shift
            help
            exit
            ;;
        -v|--verbose)
            shift
            verbose=$((verbose + 1))
            ;;
        -V|--version)
            shift
            out "$program_version"
            ;;
        -i|--input)
            shift
            input="$1"
            shift
            content=$(
                tr '[:space:]' ' ' < "$input" | 
                sed 's/[[:space:]][[:space:]]*/ /g; s/^[[:space:]]*//; s/[[:space:]]*$//;'
            )
            request_content "$content"
            ;;
        -o|--output)
            shift
            output="$1"
            shift
            ;;        
        -c|--content)
            shift
            content="$1"
            shift
            request_content "$content"
            ;;        
        --program-command)
            shift
            out "$program_command"
            ;;
        --program-version)
            shift
            out "$program_version"
            ;;
        --program-created)
            shift
            out "$program_created"
            ;;
        --program-updated)
            shift
            out "$program_updated"
            ;;
        --program-license)
            shift
            out "$program_license"
            ;;
        --program-website)
            shift
            out "$program_website"
            ;;
        --program-contact)
            shift
            out "$program_contact"
            ;;
        *)
            request_content "$@"
            shift
            ;;
    esac
done

exit $EXIT_SUCCESS
